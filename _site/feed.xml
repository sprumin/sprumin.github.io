<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-02-14T18:21:40+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sprumin’s blog</title><subtitle>생각날 때 마다 하나씩 올려보자</subtitle><author><name>Lee Seongpil</name></author><entry><title type="html">[Django] ManytoManyField 중간 테이블을 잃어버렸어요</title><link href="http://localhost:4000/m2m-migrate/" rel="alternate" type="text/html" title="[Django] ManytoManyField 중간 테이블을 잃어버렸어요" /><published>2025-02-14T18:00:00+09:00</published><updated>2025-02-14T18:00:00+09:00</updated><id>http://localhost:4000/m2m-migrate</id><content type="html" xml:base="http://localhost:4000/m2m-migrate/"><![CDATA[<p>ManyToManyField 와 migrations 에 대한 이야기</p>

<h2 id="개요">개요</h2>

<p>models.py 수정 및 로컬DB에서 테스트 후 라이브 배포를 진행하던 날.</p>

<p>migrate 에 오류는 없었으나 실제 Database에는 해당 테이블이 없는 이슈가 발생했다.</p>

<p><del>내 테이블을 훔쳐간 그녀석을 10년뒤에 어쩌고..</del></p>

<p>ManyToManyField 사용 시 생성되는 중간테이블에 관련한 이야기이다.</p>

<h2 id="manytomanyfield">ManyToManyField</h2>

<p>다대다 관계</p>

<p>두 개의 모델 사이에 다수의 관계를 설정할 수 있게 도와주는 필드이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Pizza</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">64</span><span class="p">)</span>
    <span class="n">price</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">topping</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="s">'Topping'</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Topping</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">64</span><span class="p">)</span>
</code></pre></div></div>

<p>위처럼 피자와 토핑간의 관계로 설명할 수 있다.</p>

<p>피자의 종류에는 치즈피자, 불고기피자, 페퍼로니피자, 콤비네이션피자, <del>하와이안피자</del>, 쉬림프피자 등 수많은 피자가 있다.</p>

<p>토핑에도 페퍼로니, 양파, 버섯, 불고기, 고구마, 감자, 치즈 등 수많은 토핑이 있다.</p>

<p>불고기피자에는 불고기만 들어가지 않고, 치즈는 치즈피자에만 들어가지 않듯 서로가 다양한 값들에 엮일 수 있는 관계를 다대다 관계로 이해할 수 있다.</p>

<h2 id="manytomanyfield-in-sql">ManyToManyField in SQL</h2>

<p><code class="language-plaintext highlighter-rouge">show tables</code> 를 했을 때 위처럼 편하게 나오면 좋겠지만 ManyToManyField는 Django ORM에서 편하게 사용하기 위해 만들어진 필드로 실제 SQL로 확인해보면 의문의 테이블이 추가되어 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># show tables
pizza
pizza_topping
topping
</code></pre></div></div>

<p>난 models.py 에 pizza와 topping 모델만 정의했는데 이름이 섞인 의문의 테이블이 생겨져있다.</p>

<p>그렇다. Django 는 ManyToManyField를 SQL에서 이해할 수 있도록 중간테이블을 생성해주고 있다.</p>

<p>단순히 중간 테이블의 역할이라 관계만을 보여주는 테이블이라서 해당 테이블에 추가적인 컬럼은 사용할 수 없다.</p>

<p>“음..관계가 형성된 시점이나 추가한 사람을 확인하고 싶은데?”</p>

<p>ManyToManyField 에 <code class="language-plaintext highlighter-rouge">through</code> 옵션을 사용하면 중간 테이블까지 직접 컨트롤 할 수 있으니 걱정하지 않아도 된다</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Pizza</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">64</span><span class="p">)</span>
    <span class="n">price</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">topping</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="s">'Topping'</span><span class="p">,</span> <span class="n">through</span><span class="o">=</span><span class="s">"PizzaToppingRelation"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Topping</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">64</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">PizzaToppingRealtion</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">pizza</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Pizza</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">topping</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Pizza</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>위처럼 through 사용 시 중간테이블을 대체하는 테이블을 직접 설정할 수 있다.</p>
<blockquote>
  <p>django는 다 계획이 있구나</p>
</blockquote>

<h2 id="그래서-테이블이-어디갔다고">그래서 테이블이 어디갔다고?</h2>

<p>본론으로 돌아와서, ManyToManyField 를 설정하고 migration 을 진행했는데 실제 DB에는 중간테이블이 없었다.</p>

<p>migrate 과정에도 오류가 없었고 <code class="language-plaintext highlighter-rouge">show migrations</code> 확인시에도 해당 app 의 migration 이 이루어졌다.</p>

<p>애꿎은 migrations 파일만 지웠다가 makemigrations, migrate 반복하던 와중..</p>

<p>migrations 파일에 ManytoManyField 수정 내용이 포함되지 않은것을 확인했다.</p>

<h2 id="migrations0001_initialpy">migrations/0001_initial.py</h2>

<p>models.py 가 수정되고 makemigrations 명령어를 실행하면 생성되는 파일이다.</p>

<p>기존 migration 버전과 비교하여 변경 사항을 알려주는 파일로, 해당 파일을 기반으로 migrate 가 진행된다.</p>

<p>아마도 기존 migrations 파일이 존재하지 않은 상태에서 makemigrations를 실행하여 ManytoManyField가 추가된게 아닌 기존에 있던 컬럼으로 인식한게 아닐까 싶다.</p>

<p>즉, models.py 에 변화가 없다고 판단하여 models.py 의 상태만 그대로 반영하여 생성한것이다.</p>

<p>정상적으로 필드 추가 내용이 반영되었다면 아래와 같이 AddField 가 migrations 파일에 포함되어 있어야 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Migration</span><span class="p">(</span><span class="n">migrations</span><span class="p">.</span><span class="n">Migration</span><span class="p">):</span>

    <span class="n">dependencies</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="s">'app'</span><span class="p">,</span> <span class="s">'0002_add_topping_option'</span><span class="p">),</span>
    <span class="p">]</span>

    <span class="n">operations</span> <span class="o">=</span> <span class="p">[</span>
        <span class="n">migrations</span><span class="p">.</span><span class="n">AddField</span><span class="p">(</span>
            <span class="n">model_name</span><span class="o">=</span><span class="s">'pizza'</span><span class="p">,</span>
            <span class="n">name</span><span class="o">=</span><span class="s">'topping'</span><span class="p">,</span>
            <span class="n">field</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">to</span><span class="o">=</span><span class="s">'app.Topping'</span><span class="p">),</span>
        <span class="p">),</span>
    <span class="p">]</span>
</code></pre></div></div>

<h2 id="급하게-수정하면서">급하게 수정하면서</h2>

<p>migration이 꼬였다고 라이브 DB를 막 건드릴수는 없기에 편법으로 migration 을 복구하는 방법을 알아냈다.</p>

<p><code class="language-plaintext highlighter-rouge">해당 컬럼을 지우고 migration을 진행한 뒤 해당 컬럼을 만들어서 migration을 진행해라</code></p>

<h2 id="마치며">마치며</h2>

<p>그냥 평소에 migrations 파일 관리를 잘하자…</p>]]></content><author><name>Lee Seongpil</name></author><category term="django" /><summary type="html"><![CDATA[ManyToManyField 와 migrations 에 대한 이야기]]></summary></entry><entry><title type="html">[Github Pages] Jekyll Template 문법 실행되지 않게 하기</title><link href="http://localhost:4000/raw/" rel="alternate" type="text/html" title="[Github Pages] Jekyll Template 문법 실행되지 않게 하기" /><published>2025-01-14T17:00:00+09:00</published><updated>2025-01-14T17:00:00+09:00</updated><id>http://localhost:4000/raw</id><content type="html" xml:base="http://localhost:4000/raw/"><![CDATA[<p>Code 를 보여주고 싶은데 템플릿 변수가 적용되어버린</p>

<h2 id="개요">개요</h2>

<p><a href="/category-tags/">이전 글</a> 을 작성하다가 문제가 발생했다.</p>

<p>Sidebar에 tags를 추가하기 위한 html 코드를 보여주기 위해 코드블럭을 생성하였는데 코드가 렌더링되어 나타나버렸다.</p>

<p>코드블럭에 html, markdown 심지어 python, shell 까지 다 넣어봤지만 전부 렌더링이 되어버려 뇌정지가 와버렸다.</p>

<h2 id="raw-태그">raw 태그</h2>

<p>jekyll 템플릿에는 raw 라는 템플릿 태그가 존재한다.</p>

<p>해당 태그로 감싸진 내용은 템플릿 문법에 의해 렌더링되지 않도록 만들어준다.</p>

<p><img src="/images/raw_tag.png" alt="raw-tag" style="display: block; margin: 0 auto;" /></p>

<blockquote>
  <p>raw 태그는 강제로 렌더링이 되어버리는 이슈에 급하게 캡쳐한 이미지…</p>
</blockquote>

<h3 id="원본-코드">원본 코드</h3>

<p>아래는 원본 코드다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"sidebar__tags"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3&gt;</span>Tags<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
    {% assign sorted_tags = site.tags | sort %}
    {% for tag in sorted_tags %}
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#{{ tag[0] | slugify }}"</span><span class="nt">&gt;</span>{{ tag[0] }} ({{ tag[1].size }})<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h3 id="raw-태그-미적용">raw 태그 미적용</h3>

<p>해당 코드를 그대로 코드 블럭에 삽입할 경우 아래와 같이 렌더링된다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"sidebar__tags"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3&gt;</span>Tags<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
    
    
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#django"</span><span class="nt">&gt;</span>django (1)<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#github"</span><span class="nt">&gt;</span>github (3)<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#github-pages"</span><span class="nt">&gt;</span>github pages (3)<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#jekyll"</span><span class="nt">&gt;</span>jekyll (3)<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#minimal-mistakes"</span><span class="nt">&gt;</span>minimal mistakes (3)<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h3 id="raw-태그-적용">raw 태그 적용</h3>

<p>위 원본 태그와 동일하게 보여지게 된다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"sidebar__tags"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3&gt;</span>Tags<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
    {% assign sorted_tags = site.tags | sort %}
    {% for tag in sorted_tags %}
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#{{ tag[0] | slugify }}"</span><span class="nt">&gt;</span>{{ tag[0] }} ({{ tag[1].size }})<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h2 id="마치며">마치며</h2>

<p>포스트를 작성하는게 익숙하지 않아 이미 작성한 내용도 수정하는게 일상이다.</p>

<p>코드가 템플릿 태그에 의해 렌더링되어 보여지는 이슈를 해결하려고 하니 해결 방법으로 사용한 태그가 렌더링 되어버리는 이슈는 참 당황스러웠달까</p>]]></content><author><name>Lee Seongpil</name></author><category term="github" /><category term="github pages" /><category term="jekyll" /><category term="minimal mistakes" /><summary type="html"><![CDATA[Code 를 보여주고 싶은데 템플릿 변수가 적용되어버린]]></summary></entry><entry><title type="html">[Github Pages] Tags! Instead of category</title><link href="http://localhost:4000/category-tags/" rel="alternate" type="text/html" title="[Github Pages] Tags! Instead of category" /><published>2025-01-13T12:00:00+09:00</published><updated>2025-01-13T12:00:00+09:00</updated><id>http://localhost:4000/category-tags</id><content type="html" xml:base="http://localhost:4000/category-tags/"><![CDATA[<p>Tags 로 post를 관리하고 싶은데 쉽지 않아</p>

<h2 id="개요">개요</h2>

<p>기술블로그 관련해서 찾아보다가 Kakao Tech Blog 게시글 형태가 깔끔해보였다.</p>

<p>category를 별도로 구현하지 않고, tag 를 나열해서 해당 tag를 클릭하면 관련 post만 보이도록 하는 구조였다.</p>

<p>문제는 내가 github pages 구조에 익숙하지 않다는 것..</p>

<p>그래서 기본적으로 지원하는 기능을 먼저 찾아보고 이후에 코드를 뜯어보려한다.</p>

<h2 id="tags-추가">Tags 추가</h2>

<p>기본 템플릿은 페이지 우측 상단에 Home, About, Category, Tags 메뉴가 추가되어있다.</p>

<p>난 Category, Tags 를 제거하고, 왼쪽 Sidebar에 Tag 리스트를 추가하려고 한다.</p>

<h3 id="tagsmd">Tags.md</h3>

<p>Tags 메뉴, 혹은 각 태그를 클릭했을 때 redirect 될 페이지를 만들어야한다.</p>

<p><code class="language-plaintext highlighter-rouge">_pages/tags.md</code> 경로를 생성하여 아래 내용을 입력해주면된다.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Tags"</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">tags</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/tags/</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>해당 페이지를 어떤식으로 커스텀이 가능한지는 공부하면서 알아가야지..</p>

<h3 id="sidebar에-tags-노출">sidebar에 tags 노출</h3>

<p>더 간단한 기능이 있는지 알아봐야겠지만 다른 블로그를 참고하여 <code class="language-plaintext highlighter-rouge">_includes/sidebar.html</code> 에 아래와 같이 작업했다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"sidebar__tags"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h3&gt;</span>Tags<span class="nt">&lt;/h3&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
    {% assign sorted_tags = site.tags | sort %}
    {% for tag in sorted_tags %}
        <span class="nt">&lt;li&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tags/#{{ tag[0] | slugify }}"</span><span class="nt">&gt;</span>{{ tag[0] }} ({{ tag[1].size }})<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/li&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div>

<p>위치는 sidebar div 최하단에 추가하면 되고, 템플릿에 지원하는 문법이 많아 활용하기 좋다.</p>

<h3 id="post에-tag-추가">Post에 tag 추가</h3>

<p>해당 태그들을 별도로 관리하는 형식을 사용하지 않았다.</p>

<p>Post에 태그를 할당하면, 해당 태그들이 jekyll에서 전역변수로 수집되며 각 템플릿에서 호출하여 사용하는 형태인것 같다.</p>

<p>Posts 머리말에 아래 내용을 추가해주면 된다.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tags:
<span class="p">    -</span> github
<span class="p">    -</span> github pages
<span class="p">    -</span> ruby
<span class="p">    -</span> minimal mistakes
</code></pre></div></div>

<h2 id="마치며">마치며</h2>

<p>까먹지 않으려고 기록한 내용이라 부정확한 부분도, 더 간단하게 변경할 방법도 있을 것이다.</p>

<p>현재 tags 페이지를 열어보면 모든 태그가 나열되어 있고, 각 태그별로 중복된 post도 노출되어 원하는 스타일의 페이지가 아닌 상황이다.</p>

<p>sidebar에서 클릭한 tag에 대한 포스트만 나열되도록 수정해보려한다.</p>]]></content><author><name>Lee Seongpil</name></author><category term="github" /><category term="github pages" /><category term="jekyll" /><category term="minimal mistakes" /><summary type="html"><![CDATA[Tags 로 post를 관리하고 싶은데 쉽지 않아]]></summary></entry><entry><title type="html">[Github Pages] Minimal Mistakes 적용기</title><link href="http://localhost:4000/minimal-mistakes/" rel="alternate" type="text/html" title="[Github Pages] Minimal Mistakes 적용기" /><published>2025-01-10T16:00:00+09:00</published><updated>2025-01-10T16:00:00+09:00</updated><id>http://localhost:4000/minimal-mistakes</id><content type="html" xml:base="http://localhost:4000/minimal-mistakes/"><![CDATA[<p>시즌 525번째 “기술블로그 시작해야지”</p>

<h2 id="개요">개요</h2>

<p>매년 이직 시즌이 찾아올 때 마다 기술블로그를 써야겠다는 생각을 한다.</p>

<p>그렇다 진짜 생각만 했다.</p>

<p>이번에 시작안하면 이번 생에는 안할 것 같아서 세팅부터 시작했다.</p>

<h2 id="github-pages">github pages</h2>

<p>velog, tistory, medium, notion 등 고민을 많이 했지만 github pages로 선택하였다.</p>

<p>각자 장단점이 있지만 github pages를 선택한 이유는 그나마 익숙해서다.</p>

<p>이전에 테마 설정해놓은게 일부 남아있기도 했고, 다른 플랫폼은 처음부터 시작해야해서 익숙한 플랫폼으로 골랐다.</p>

<blockquote>
  <p>하지만 첫 글을 쓰기보다 세팅하는데 시간이 더 오래 걸리게 되었다는..</p>
</blockquote>

<h2 id="minimal-mistakes">Minimal Mistakes</h2>

<p>심플하다. 해당 테마를 선택한 이유다.</p>

<p>화려한걸 별로 좋아하지 않아서 여백이 좀 있고 폰트가 심플한 테마를 찾는게 목표였는데 마침 Minimal Mistakes 테마가 보여서 바로 가져왔다.</p>

<p>Minimal Mistakes 공식 가이드도 잘되어 있지만, 사용하는 사람들도 많아서 그런지 폰트 설정이나 세부 디테일 수정에 있어서 참고할 수 있는 글들이 많았다.</p>

<h3 id="ruby-와-jekyll-설치">Ruby 와 Jekyll 설치</h3>

<p><a href="https://rubyinstaller.org/downloads/">Ruby+Devkit</a> 에서 x86 으로 설치해야한다.</p>
<blockquote>
  <p>jekyll이 32비트라서 x86 설치</p>
</blockquote>

<p>이후 하기 명령어들을 실행해주었다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># jekyll 다운로드</span>
gem <span class="nb">install </span>jekyll

<span class="c"># bundler 다운로드</span>
gem <span class="nb">install </span>bundler

<span class="c"># 로컬 서버 구동</span>
bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<h3 id="bundler-jekyll-설치-오류">bundler, jekyll 설치 오류</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MSYS2 seems to be unavailable Verify integrity of msys2-x86_64-20190524.exe ... 
</code></pre></div></div>

<p>이런 오류가 발생했었다.</p>

<p><code class="language-plaintext highlighter-rouge">ridk install</code> 이라는 명령어를 실행하라는 안내 문구를 반환하기에 시도했지만 제대로 설치가 되지 않아서 삽질하게 되었다.</p>

<p><a href="https://www.msys2.org/">MSYS2</a> 여기서 msys2…exe 파일을 다운로드 한 뒤 설치하자.</p>

<p>설치 후 <code class="language-plaintext highlighter-rouge">ridk install</code> 명령어 실행 후 <code class="language-plaintext highlighter-rouge">3</code> 을 선택해야 devkit 까지 설치되어 오류가 발생하지 않는다.</p>

<p>이제 다시 설치하면 정상적으로 진행된다.</p>

<h2 id="마치며">마치며</h2>

<p>그래도 블로그 설정하고 글 하나 쓰고 나니까 나름 이뻐보인다.</p>

<p>하루 하나는 아니더라도 주에 한두개씩 쓰다보면 나중에 다시 읽어볼만한 내용들이 있겠지</p>]]></content><author><name>Lee Seongpil</name></author><category term="github" /><category term="github pages" /><category term="jekyll" /><category term="minimal mistakes" /><summary type="html"><![CDATA[시즌 525번째 “기술블로그 시작해야지”]]></summary></entry></feed>